#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<windows.h>
#include<time.h>
#include<string.h>
int const H = 23;	//调节游戏界面大小的高
int const L = 23;	//调节游戏界面大小的长
int score = 0;		//玩家得分
typedef struct Node		//定义双向链表贪吃蛇节点
{
	int x, y;		//节点的横、纵坐标
	struct Node *pre;
	struct Node *next;
}NODE, *pNODE;

typedef struct Food		//定义食物节点
{
	int x, y;
}FOOD, *pFOOD;

void _gotoxy(unsigned char x, unsigned char y)		//定义自由移动光标函数
{
	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO cci;
	GetConsoleCursorInfo(hOut, &cci);//获取光标信息
	cci.bVisible = FALSE;//隐藏光标
	SetConsoleCursorInfo(hOut, &cci);//设置控制台光标状态 
	COORD cor;//COORD是windows API定义的结构,定义一个二维坐标
	HANDLE hout;
	cor.X = x;
	cor.Y = y;
	hout = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorPosition(hout, cor);//设置控制台光标的位置
}

pNODE _initSnake()//定义蛇初始化函数，创建蛇的第一节 
{
	pNODE pHead = (pNODE)malloc(sizeof(NODE));
	srand(time(0));//生成伪随机数序列的种子
	if (pHead == NULL)
	{
		printf("内存分配失败!\n");
		exit(-1);
	}
	pHead->x = rand() % L;//调用rand函数生成伪随机数
	pHead->y = rand() % H;//调用rand函数生成伪随机数
	pHead->pre = NULL;
	pHead->next = NULL;
	return pHead;
}

FOOD _initFood()//定义初始化食物函数 
{
	FOOD food;
	srand(time(0)+1);//生成伪随机数序列的种子
	food.x = rand() % L;//调用rand函数生成伪随机数
	food.y = rand() % H;//调用rand函数生成伪随机数
	return food;
}

char _Kbhit(char tag)//定义检查键盘按键函数 
{
	char c;
	if (_kbhit() != 0)//如果有按键输入
	{
		while (_kbhit() != 0)//因为方向键↑、↓、←、→为4位16进制数，_getch()只能接收2位16进制数，所以只需接收后两位
			c = _getch();	 //_getchar()返回值 左：75  右：77  上：72  下：80
		if (tag != 77 && c == 75)//当前方向不为右时，读取左
			tag = c;
		else if (tag != 75 && c == 77)//当前方向不为左时，读取右
			tag = c;
		else if (tag != 72 && c == 80)//当前方向不为上时，读取下
			tag = c;
		else if (tag != 80 && c == 72)//当前方向不为下时，读取上
			tag = c;
		else if (c == 27)//ESC
			tag = c;
	}
	return tag;
}

int MoveSnake(pNODE phead, char c,int *grade)//定义蛇运动函数  
{
	int over = 0;//当蛇撞墙或者撞自己时，over设置为1，游戏结束
	pNODE pt = phead;
	while (pt->next != NULL)
	{
		pt = pt->next;
	}
	_gotoxy(2 * (pt->x + 2)-2 , pt->y + 2);//将当前的光标定位到蛇的最后一节打印空格
	printf("  ");
	while (pt != phead)//将链表中每个节点的坐标顺序后移
	{
		pt->x = pt->pre->x;
		pt->y = pt->pre->y;
		pt = pt->pre;
	}
	if (c == 75)//←，改变蛇头坐标，判断蛇头是否撞墙
	{
		pt->x -= 1;
		if (pt->x >= L || pt->x < 0)
			over = 1;
	}
	else if (c == 77)//→，改变蛇头坐标，判断蛇头是否撞墙
	{
		pt->x += 1;
		if (pt->x >= L || pt->x < 0)
			over = 1;
	}
	else if (c == 72)//↑，改变蛇头坐标，判断蛇头是否撞墙
	{
		pt->y -= 1;
		if (pt->y >= H || pt->y < 0)
			over = 1;
	}
	else if (c == 80)//↓，改变蛇头坐标，判断蛇头是否撞墙
	{
		pt->y += 1;
		if (pt->y >= H || pt->y < 0)
			over = 1;
	}
	pt = phead->next;
	while (pt != NULL)//判断蛇头是否撞到蛇身
	{
		if (pt->x == phead->x&&pt->y == phead->y)
		{
			over = 1;
			break;
		}
		pt = pt->next;
	}

	pt = phead;
	while (pt != NULL)//定点打印蛇身
	{
		if (pt == phead)//打印蛇头
		{
			_gotoxy(2*(pt->x+2)-2, pt->y+2);
			printf("■");
		}
		else//打印蛇身
		{
			_gotoxy(2 * (pt->x + 2)-2, pt->y+2);
			printf("□");
		}
		pt = pt->next;
	}
	_gotoxy(70, 19);//定点打印玩家得数
	printf("%d",score);
	return over;
}

void _printf(pNODE head,FOOD food,int i)//定义打印游戏界面函数
{
	int h, l;
	char grade[10];
	switch (i)
	{
	case 200:
		strcpy_s(grade, strlen("简单") + 1, "简单");
		break;
	case 100:
		strcpy_s(grade, strlen("中等") + 1, "中等");
		break;
	case 50:
		strcpy_s(grade, strlen("困难") + 1, "困难");
		break;
	}
	printf("	\n");
	for (l = 0; l <= L + 1; l++)
		printf("■");
	printf("\n");
	for (h = 0; h < H; h++)
	{
		printf("■");
		for (l = 0; l <L; l++)
		{
			if(head->x==l&&head->y==h)//打印初始随机出现的蛇头
				printf("■");
			else if (food.x == l&&food.y == h)//打印初始随机出现的食物
				printf("**");
			else
				printf("  ");
		}
		printf("■");
		if (h == 1)
			printf("	     可随时按ESC退出");
		if (h == 3)
			printf("	    可随时按PAUSE暂停");
		if (h == 5)
			printf("		控制输入：");
		if (h == 7)
			printf("		  上↑");
		if (h == 9)
			printf("		  下↓");
		if (h == 11)
			printf("		  左←");
		if (h == 13)
			printf("		  右→");
		if (h == 15)
			printf("		  难度：%s", grade);
		if (h == 17)
			printf("	        SCORE:");
		printf("\n");
	}

	for (l = 0; l <= L + 1; l++)
		printf("■");
	printf("\n");
	printf("		  按控制键开始\n");
}

pNODE _snakeeatfood(pNODE phead, pFOOD food)//定义蛇吃到食物处理函数
{
	pNODE p = NULL, pt = NULL;
	if (phead->x == food->x&&phead->y == food->y)
	{
		score++;
		p = (pNODE)malloc(sizeof(NODE));
		if (p == NULL)
		{
			printf("内存分配失败！\n");
			exit(-1);
		}
		pt = phead;
		while (pt->next != NULL)//在链表蛇尾插入新的节点
			pt = pt->next;
		p->pre = pt;
		p->next = NULL;
		pt->next = p;
		*food = _initFood();
		pt = phead;
	while (pt != NULL)//生成新的食物，食物不能再地图边界或者蛇身上出现
		{
		if ((pt->x == food->x&&pt->y == food->y) || ((2 * (food->x + 2) - 2) >= (2 * (L + 2) - 2)))
		{
			pt = phead;
			*food = _initFood();
			}
		else	
			pt = pt->next;
		}
	_gotoxy(2 * (food->x + 2) - 2, food->y + 2);//打印新的食物
	printf("**");
    if (2 * (food->x + 2) - 2 == 2 * (L + 2) - 4)
	{
		_gotoxy(2 * (L + 2) - 2, food->y + 2);
		printf("■");
	}
	}
	return phead;
}

void FreeMemory(pNODE *phead)//定义释放内存函数  
{
	pNODE p = NULL, pt = NULL;
	while (*phead != NULL)
	{
		pt = (*phead)->next;
		if (pt != NULL)
			pt->pre = NULL;
		p = *phead;
		free(p);
		p = NULL;
		*phead = pt;
	}
}

void _opening(int *grade)//定义开始界面函数
{
	int i;
	printf("\n\n\n\n\n\n		        	■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
	printf("				■欢迎游玩贪吃蛇，请选择难度：1、简单 2、中等 3、困难 ■\n");
	printf("		        	■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
	scanf_s("%d", &i);//选择难度
	if (i == 1)
		*grade = 200;
	else if (i == 2)
		*grade = 100;
	else if (i == 3)
		*grade = 50;
}

void _ending(pNODE head)//定义结束界面函数
{
	system("cls");
	printf("\n\n\n\n\n\n		        	■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
	printf("				■游戏结束，得分为%3d  是否继续游玩？ Y：继续 任意键退出■\n", score);
	printf("		        	■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
	FreeMemory(&head);//结束释放内存
}

int main()//定义主函数
{
	char label;
	do {
		system("cls");
		score = 0;//每次游戏重置玩家得分
		char tag = '0', get;
		int over = 0, grade;
		pNODE head = _initSnake();//初始化蛇头
		FOOD food = _initFood();//初始化食物
		system("color 2");
		system("title 贪吃蛇案例");
		_opening(&grade);
		system("cls");
		_printf(head,food,grade);
		while (1)
		{
			head = _snakeeatfood(head, &food);
			get = _Kbhit(tag);
			if (get == 27)
			{
				over = 1;
				break;
			}
			else
				tag = get;
			over = MoveSnake(head, tag,&grade);
			if (over)
				break;
			Sleep(grade);//延时函数
		}
		if (over)
		{
			_ending(head);
		}
		getchar();
		scanf_s("%c", &label);
	} while (label == 'Y' || label == 'y');
	system("pause");
	return 0;
}
